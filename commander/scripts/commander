#!/usr/bin/env python
import threading
import rospy
from std_srvs.srv import *
from commander.srv import *
from commander.commands.AddCameraCommand import AddCameraCommand
from commander.commands.GetCameraCommand import GetCameraCommand
from commander.commands.GetCamerasListCommand import GetCamerasListCommand
from commander.commands.UnknownCommand import UnknownCommand
from commander.commands.RemoveCameraCommand import RemoveCameraCommand
from commander.commands.AddFilterCommand import AddFilterCommand
from commander.commands.RemoveFilterCommand import RemoveFilterCommand
from commander.commands.GetFilterTypesCommand import GetFilterTypesCommand
from commander.executors.ThresholdFilterExecutor import ThresholdFilterExecutor
from commander.utils.Database import Database
from commander.data_classes.Camera import Camera

cameras = {}
filter_types = {"threshold": ThresholdFilterExecutor}
database = None

lock = threading.Lock()


def commander_callback(request):
    """
    Create process on callback

    :param request: commander.srv arguments.
    :return: commander.srv result.
    """
    with lock:
        if request.command == "camera.add":
            command = AddCameraCommand()
            response = command.execute(cameras=cameras,
                                       stream_url=request.arguments[0])

        elif request.command == "camera.get":
            command = GetCameraCommand()
            response = command.execute(cameras=cameras,
                                       id=request.arguments[0])

        elif request.command == "camera.list":
            command = GetCamerasListCommand()
            response = command.execute(cameras=cameras)

        elif request.command == "camera.remove":
            command = RemoveCameraCommand()
            response = command.execute(cameras=cameras,
                                       id=request.arguments[0])

        elif request.command == "filter.types":
            command = GetFilterTypesCommand()
            response = command.execute(filter_types=filter_types)

        elif request.command == "filter.add":
            command = AddFilterCommand()
            response = command.execute(cameras=cameras,
                                       filter_types=filter_types,
                                       camera_id=request.arguments[0],
                                       filter_type=request.arguments[1])

        elif request.command == "filter.remove":
            command = RemoveFilterCommand()
            response = command.execute(cameras=cameras,
                                       camera_id=request.arguments[0],
                                       filter_id=request.arguments[1])

        else:
            print(request.arguments)
            command = UnknownCommand()
            response = command.execute()

    return response


if __name__ == "__main__":
    rospy.init_node('commander')

    commander_service = rospy.Service(
        'commander', commander, commander_callback)

    database = Database(
        dbname="ros_db",
        username="ros",
        password="ros",
        host="localhost",
        port=5432
    )

    camera = Camera()
    camera.id = "d22174aa-cbbf-493f-8d08-81e01728c6ac"
    camera.name = "123"
    camera.url = "https://123"

    database.remove_camera(camera.id)

    rospy.spin()
