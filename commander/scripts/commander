#!/usr/bin/env python
import time
import threading
import rospy
from std_srvs.srv import *
from commander.srv import *
from commander.commands.AddCameraCommand import AddCameraCommand
from commander.commands.GetCameraCommand import GetCameraCommand
from commander.commands.GetCamerasListCommand import GetCamerasListCommand
from commander.commands.UnknownCommand import UnknownCommand
from commander.commands.RemoveCameraCommand import RemoveCameraCommand
from commander.commands.UpdateCamerasCommand import UpdateCamerasCommand

cameras = {}
lock = threading.Lock()


def commander_callback(request):
    """
    Create process on callback

    :param request: commander.srv arguments.
    :return: commander.srv result.
    """
    response = ""

    with lock:
        if request.command == "camera.add":
            command = AddCameraCommand()
            response = command.execute(cameras=cameras, stream_url=request.argument)

        elif request.command == "camera.get":
            command = GetCameraCommand()
            response = command.execute(cameras=cameras, id=request.argument)

        elif request.command == "camera.list":
            command = GetCamerasListCommand()
            response = command.execute(cameras=cameras)

        elif request.command == "camera.remove":
            command = RemoveCameraCommand()
            response = command.execute(cameras=cameras, id=request.argument)

        else:
            command = UnknownCommand()
            response = command.execute()

    return response


def check_cameras():
    """
    Check cameras if they are running,
    otherwise remove not running ones.
    """
    while not rospy.is_shutdown():
        with lock:
            command = UpdateCamerasCommand()
            command.execute(cameras=cameras)

        time.sleep(1)


if __name__ == "__main__":
    rospy.init_node('commander')

    commander_service = rospy.Service(
        'commander', commander, commander_callback)

    # Check if cameras are alive.
    check_thread = threading.Thread(target=check_cameras)
    check_thread.daemon = True
    check_thread.start()

    rospy.spin()
